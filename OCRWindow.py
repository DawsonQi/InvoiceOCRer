# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtWidgets import QFileDialog, QApplication, QPushButton, QMessageBox,QMainWindow,QInputDialog,QTextEdit
from PyQt5.Qt import QThread,QMutex,pyqtSignal
from MainAction import OCR_PDF,OCR_IMGS

# 继承QThread
class Thread_1(QThread):  # 线程1
    _signal =pyqtSignal()
    def __init__(self):
        super().__init__()
        self.threadpath = ''
        self.threadFlag = ''
    def run(self):
        #qmut_1.lock() # 加锁
        OCR_PDF(self.threadpath,self.threadFlag)
        #qmut_1.unlock() # 解锁
        self._signal.emit()

class Thread_2(QThread):  # 线程1
    _signal =pyqtSignal()
    def __init__(self):
        super().__init__()
        self.threadpath = ''
        self.threadFlag = ''
    def run(self):
        #qmut_1.lock() # 加锁
        OCR_IMGS(self.threadpath,self.threadFlag)
        #qmut_1.unlock() # 解锁
        self._signal.emit()

class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.retranslateUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(342, 234)
        MainWindow.setMinimumSize(QtCore.QSize(342, 234))
        MainWindow.setMaximumSize(QtCore.QSize(342, 234))
        self.label = QtWidgets.QLabel(MainWindow)
        self.label.setGeometry(QtCore.QRect(80, 20, 200, 29))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.comboBox = QtWidgets.QComboBox(MainWindow)
        self.comboBox.setGeometry(QtCore.QRect(110, 70, 111, 31))
        self.comboBox.setEditable(False)
        self.comboBox.setCurrentText("快速")
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setBold(False)
        font.setWeight(50)
        self.comboBox.setFont(font)
        self.comboBox.addItem('快速')
        self.comboBox.addItem('高精')
        self.comboBox.setObjectName("comboBox")
        self.PDFButton = QtWidgets.QPushButton(MainWindow)
        self.PDFButton.setGeometry(QtCore.QRect(60, 120, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.PDFButton.setFont(font)
        self.PDFButton.setObjectName("PDFButton")
        self.IMGButton = QtWidgets.QPushButton(MainWindow)
        self.IMGButton.setGeometry(QtCore.QRect(60, 170, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.IMGButton.setFont(font)
        self.IMGButton.setObjectName("IMGButton")

        self.PDFButton.clicked.connect(self.openfile)
        self.IMGButton.clicked.connect(self.opendDirectory)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def openfile(self):
        fname = QFileDialog.getOpenFileName(self, '打开文件','./')
        Flag = self.comboBox.currentText()
        if fname[0]:
            print(fname[0])
            self.thread_1 = Thread_1()  # 创建线程
            self.thread_1._signal.connect(self.printfini)
            self.thread_1.threadFlag = Flag
            self.thread_1.threadpath = fname[0]
            self.thread_1.start()  # 开始线程

            self.reply = QMessageBox.information(self,'正在分析','正在识别发票信息\n点Close停止',QMessageBox.Close, QMessageBox.Close)
            if self.reply == QMessageBox.Close:
                self.thread_1.terminate()
                self.thread_1.wait()

    def opendDirectory(self):
        DirectoryName = QFileDialog.getExistingDirectory(self, '打开文件夹','./')
        Flag = self.comboBox.currentText()
        if DirectoryName:
            print(DirectoryName)

            self.thread_2 = Thread_2()  # 创建线程
            self.thread_2._signal.connect(self.printfini)
            self.thread_2.threadFlag = Flag
            self.thread_2.threadpath = DirectoryName
            self.thread_2.start()  # 开始线程

            self.reply = QMessageBox.information(self,'正在分析','正在识别发票信息\n点Close停止',QMessageBox.Close, QMessageBox.Close)
            if self.reply == QMessageBox.Close:
                self.thread_2.terminate()
                self.thread_2.wait()

            #OCR_IMGS(DirectoryName,Flag)

    def printfini(self):
        fini = QMessageBox.information(self, '大功告成', '文字识别完毕', QMessageBox.Ok, QMessageBox.Ok)
        try:
            self.thread_1.terminate()
            self.thread_1.wait()
        except:
            self.thread_2.terminate()
            self.thread_2.wait()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "发票信息识别器"))
        self.label.setText(_translate("MainWindow", "发票信息识别器"))
        self.PDFButton.setText(_translate("MainWindow", "打开一个PDF文件"))
        self.IMGButton.setText(_translate("MainWindow", "打开一个包含图片的文件夹"))

if __name__ == '__main__':
    app = QApplication(sys.argv)
    MainWindow1 = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow1)
    MainWindow1.show()
    sys.exit(app.exec_())